plants%>%
mutate(now=(`Harvest Date`>=today()))
today="2019-01-16"
today=ymd(today)
#Make dataframe
veg=c("Onions", "Garlic", "Asparagus")
sown=c(today)
harv=(today+months(6))
h2=today+years(2)
harvest=c(harv,harv,h2)
plants=data.frame(veg,sown,harvest)
names(plants)=c("Vegetable", "Date Sown", "Harvest Date")
str(plants)
plants%>%
mutate(now=(`Harvest Date`>=today()))
plants%>%
mutate(now=(`Harvest Date`<=today()))
plants=plants%>%
mutate(now=(`Harvest Date`<=today(), label="YES"))
plants=plants%>%
mutate(now=(`Harvest Date`<=today()))
plants%>%
mutate(if(now==FALSE){test="hi"}else{test="t"})
plants%>%
mutate((now==FALSE){test="hi"}else{test="t"})
datatable(plants) %>% formatStyle(
'Harvest Date',
backgroundColor = styleInterval(c(today()), c('white', 'yellow'))
)
plants%>%
mutate(test=if(now==FALSE){test="hi"}else{test="t"})
h2=today+years(0)
harvest=c(harv,harv,h2)
plants=data.frame(veg,sown,harvest)
names(plants)=c("Vegetable", "Date Sown", "Harvest Date")
str(plants)
plants=plants%>%
mutate(now=(`Harvest Date`<=today()))
plants%>%
mutate(test=if(now==FALSE){test="hi"}else{test="t"})
plants=plants%>%
mutate(now=(`Harvest Date`<=today()))
plants%>%
mutate(test=if(now==FALSE){test="hi"}else{test="t"})
library(lubridate)
#install.packages("DT")
today="2019-01-16"
today=ymd(today)
#Make dataframe
veg=c("Onions", "Garlic", "Asparagus")
sown=c(today)
harv=(today+months(6))
h2=today+years(0)
harvest=c(harv,harv,h2)
plants=data.frame(veg,sown,harvest)
names(plants)=c("Vegetable", "Date Sown", "Harvest Date")
str(plants)
veg=c("Onions", "Garlic", "Asparagus")
sown=c(today)
harv=(today+months(6))
h2=today+years(3)
harvest=c(harv,harv,h2)
plants=data.frame(veg,sown,harvest)
names(plants)=c("Vegetable", "Date Sown", "Harvest Date")
str(plants)
plants2=plants%>%
mutate(test=(if `Harvest Date` >= today()){print "hi"}else{print "t"}))
library(tidyverse)
plants2=plants%>%
mutate(test=(if `Harvest Date` >= today()){print "hi"}else{print "t"}))
plants2=plants%>%
mutate(test=(if Harvest Date >= today()){print "hi"}else{print "t"}))
veg=c("Onions", "Garlic", "Asparagus")
sown=c(today)
harv=(today+months(6))
h2=today+years(3)
harvest=c(harv,harv,h2)
plants=data.frame(veg,sown,harvest)
names(plants)=c("Vegetable", "Date_Sown", "Harvest_Date")
str(plants)
plants2=plants%>%
mutate(test=(if(Harvest_Date>= today()){test= "hi"}else{test= "t"}))
View(plants2)
plants2=plants%>%
mutate(test=(if(Harvest_Date> today()){test= "hi"}else{test= "t"}))
harv=(today+months(6))
h2=today+years(0)
harvest=c(harv,harv,h2)
plants=data.frame(veg,sown,harvest)
names(plants)=c("Vegetable", "Date_Sown", "Harvest_Date")
plants2=plants%>%
mutate(test=(if(Harvest_Date> today()){test= "hi"}else{test= "t"}))
View(plants2)
h2=today-years(1))
harvest=c(harv,harv,h2)
plants=data.frame(veg,sown,harvest)
names(plants)=c("Vegetable", "Date_Sown", "Harvest_Date")
str(plants)
#Make dataframe
veg=c("Onions", "Garlic", "Asparagus")
sown=c(today)
harv=(today+months(6))
h2=today-years(1)
harvest=c(harv,harv,h2)
plants=data.frame(veg,sown,harvest)
names(plants)=c("Vegetable", "Date_Sown", "Harvest_Date")
str(plants)
plants2=plants%>%
mutate(test=(if(Harvest_Date > today()){test= "hi"}else{test= "t"}))
View(plants2)
plants2=plants%>%
summarise(test=(if(Harvest_Date > today()){test= "hi"}else{test= "t"}))
today()
Harvest_Date >= today()
plants2=plants%>%
mutate(ready=case_when(Harvest_Date >= today() ~ "Not yet", TRUE~"Harvest"))
library(DT)
datatable(plants2) %>% formatStyle(
'Harvest_Date',
backgroundColor = styleInterval(c(plants2$ready), c('white', 'yellow'))
)
datatable(plants2) %>% formatStyle(
'Harvest_Date',
backgroundColor = styleEqual(c(plants2$ready), c('white', 'yellow'))
)
datatable(plants2) %>% formatStyle(
'Harvest_Date',
backgroundColor = styleEqual(c(unique(plants2$ready)), c('white', 'yellow'))
)
plants2$ready
datatable(iris) %>%
formatStyle('Sepal.Length', fontWeight = styleInterval(5, c('normal', 'bold'))) %>%
formatStyle(
'Sepal.Width',
color = styleInterval(c(3.4, 3.8), c('white', 'blue', 'red')),
backgroundColor = styleInterval(3.4, c('gray', 'yellow'))
) %>%
formatStyle(
'Petal.Length',
background = styleColorBar(iris$Petal.Length, 'steelblue'),
backgroundSize = '100% 90%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center'
) %>%
formatStyle(
'Species',
transform = 'rotateX(45deg) rotateY(20deg) rotateZ(30deg)',
backgroundColor = styleEqual(
unique(iris$Species), c('lightblue', 'lightgreen', 'lightpink')
)
)
datatable(plants2) %>% formatStyle(
'Harvest_Date',
backgroundColor = styleEqual((unique(plants2$ready)), c('white', 'yellow'))
)
datatable(iris) %>%
formatStyle(
'Species',
transform = 'rotateX(45deg) rotateY(20deg) rotateZ(30deg)',
backgroundColor = styleEqual(
unique(iris$Species), c('lightblue', 'lightgreen', 'lightpink')
)
)
datatable(plants2) %>% formatStyle("Harvest_Date",
backgroundColor = styleEqual(unique(plants2$ready), c('lightblue', 'yellow'))
)
datatable(plants2) %>% formatStyle("Harvest_Date",
backgroundColor = styleEqual(unique(plants2$Harvest_Date), c('lightblue', 'yellow'))
)
datatable(plants2) %>% formatStyle("ready",
backgroundColor = styleEqual(unique(plants2$Harvest_Date), c('lightblue', 'yellow'))
)
datatable(plants2) %>% formatStyle("ready",
backgroundColor = styleEqual(c("Not yet", "Harvest"), c('lightblue', 'yellow'))
)
shiny::runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
View(plants2)
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
shiny::runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
runApp('~/shiny/harvestapp')
today="2019-01-16"
today=ymd(today)
#Make dataframe
veg=c("Onions", "Garlic", "Asparagus")
sown=c(today)
harv=(today+months(6))
h2=today-years(1)
harvest=c(harv,harv,h2)
plants=data.frame(veg,sown,harvest)
names(plants)=c("Vegetable", "Date_Sown", "Harvest_Date")
plants2=plants%>%
mutate(ready=case_when(Harvest_Date >= today() ~ "Not yet", TRUE~"Harvest"))
runApp('~/shiny/harvestapp')
library(lubridate)
library(tidyverse)
#install.packages("DT")
today="2019-01-16"
today=ymd(today)
#Make dataframe
veg=c("Onions", "Garlic", "Asparagus")
sown=c(today)
harv=(today+months(6))
h2=today-years(1)
harvest=c(harv,harv,h2)
plants=data.frame(veg,sown,harvest)
names(plants)=c("Vegetable", "Date_Sown", "Harvest_Date")
str(plants)
library(DT)
plants2=plants%>%
mutate(ready=case_when(Harvest_Date >= today() ~ "Not yet", TRUE~"Harvest"))
datatable(plants2) %>% formatStyle("ready",
backgroundColor = styleEqual(c("Not yet", "Harvest"), c('white', 'yellow'))
)
runApp('~/shiny/harvestapp')
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='GardenR.2018', dbname='plants', host='host')
mydb = dbConnect(MySQL(), user='root', password='GardenR.2018', dbname='plants', host='localhost')
mydb = dbConnect(MySQL(), user='root', password='GardenR.2018', dbname='Local instance MySQL80', host='localhost')
myHost <- '127.0.0.1'
myUsername = 'root'
myDbname = 'plants'
myPort = 3306
myPassword = GardenR.2018
myPassword = 'GardenR.2018'
con = dbConnect(m, user= myUsername, host= myHost, password= myPassword, dbname= myDbname, port= myPort)
con = dbConnect(MySQL(), user= myUsername, host= myHost, password= myPassword, dbname= myDbname, port= myPort)
con = dbConnect(MySQL(), user= myUsername, host= myHost, password= GardenR.2018, dbname= myDbname, port= myPort)
con = dbConnect(MySQL(), user= myUsername, host= myHost, password= 'GardenR.2018', dbname= myDbname, port= myPort)
myUsername = 'emma'
con = dbConnect(MySQL(), user= myUsername, host= myHost, password= 'GardenR.2018', dbname= myDbname, port= myPort)
runApp('~/shiny/harvestapp')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
x=1
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
x=1
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
ramen_ratings <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-04/ramen_ratings.csv")
str(ramen_ratings)
View(ramen_ratings)
library(dplyr)
ramen_countries=ramen_rating%>%
group_by(country, star)
ramen_countries=ramen_ratings%>%
group_by(country, star)
ramen_countries=ramen_ratings%>%
group_by(country, stars)
View(ramen_countries)
ramen_countries=ramen_ratings%>%
group_by(stars) #%>%
summary(ramen_ratings)
ramen_countries=ramen_ratings%>%
gather('5','4.75','4.5','4.25','4', key='stars', values="brand") #%>%
ramen_countries=ramen_ratings%>%
gather('5','4.75','4.5','4.25','4', key='stars', values="brand") #%>%
ramen_countries=ramen_ratings%>%
filter(stars>=4)#%>%
View(ramen_countries)
ramen_stars=ramen_ratings%>%
filter(stars>=4)
ramen_stars%>%
aggregate(country)
#filter to stars >=4
ramen_stars=ramen_ratings%>%
group_by(country)%>%
summarise(brands=n(brand))
#filter to stars >=4
ramen_stars=ramen_ratings%>%
group_by(country)%>%
summarise(brands=n())
View(ramen_stars)
#filter to stars >=4
ramen_stars=ramen_ratings%>%
group_by(country)%>%
summarise(n=n())
#filter to stars >=4
ramen_stars=ramen_ratings%>%
group_by(country,brand,style)%>%
summarise(n=n())
View(ramen_stars)
filter(stars>=4)%>%
ramen_stars%>%
select(country=="Australia")%>%
mutate(lat=25.2744,long=133.7751)
filter(stars>=4)%>%
ramen_stars%>%
select(country=="Australia")%>%
mutate(lat=25.2744,long=133.7751)
#filter to stars >=4
ramen_stars=ramen_ratings%>%
group_by(country,brand,style)%>%
summarise(n=n())
ramen_stars%>%
select(country=="Australia")%>%
mutate(lat=25.2744,long=133.7751)
ramen_stars%>%
select(country=="Australia")%>%
mutate(lat=25.2744,long=133.7751)
ramen_stars%>%
select(country=="Australia")%>%
mutate(lat=25.2744,long=133.7751)
ramen_stars%>%
summarise(country)
ramen_stars%>%
summarise()
ramen_stars%>%
summarise(n)
summarise(ramen_stars)
ramen_stars%>%
count(country)
ramen_stars%>%
group_by(country)
ramen_stars%>%
group_by(country)
ramen_stars%>%
group_by(country)%>%
count(country)
ramen_stars%>%
group_by(country)%>%
count(country)%>%
arrange(nn)
ramen_stars%>%
group_by(country)%>%
count(country)%>%
arrange(desc(nn))
#>4 start & top ten country
ramen_top5=ramen_stars%>%
group_by(country)%>%
count(country)%>%
arrange(desc(nn))
View(ramen_stars)
View(ramen_top5)
ramen_top5%>%
mutate(lat= case_when(
country=="Japan"~"-35.652832",
country=="United States"~"23.55",
country=="Taiwan"~"22.44",
country=="China"~"24.3",
TRUE~""))
ramen_top5%>%
filter(country=="Japan" || "United States"||"Taiwan"||"China"||"South Korea")
ramen_top5%>%
filter(country=="Japan" | "United States"|"Taiwan"|"China"|"South Korea")
ramen_top5%>%
filter(country=="Japan" &country== "United States"& country=="Taiwan" & country=="China" & country=="South Korea")
ramen_top5%>%
filter(country=="Japan" | country== "United States"| country=="Taiwan" | country=="China" | country=="South Korea")
ramen_top5%>%
filter(country=="Japan" | country== "United States"| country=="Taiwan" | country=="China" | country=="South Korea")
ramen_top5%>%
filter(country=="Japan" | country== "United States"| country=="Taiwan" | country=="China" | country=="South Korea")%>%
mutate(lat= case_when(
country=="Japan"~"35.652832",
country=="United States"~"37.090240",
country=="Taiwan"~"23.697809",
country=="China"~"35.861660",
TRUE~"35.907757"))%>%
mutate(long= case_when(
country=="Japan"~"138.252930",
country=="United States"~"-95.712891",
country=="Taiwan"~"120.960518",
country=="China"~"104.195396",
TRUE~"127.766922"))
source('~/.active-rstudio-document', echo=TRUE)
ramen_top_countries=ramen_stars%>%
group_by(country)%>%
count(country)%>%
arrange(desc(nn))
ramen_top5=ramen_top_countries%>%
filter(country=="Japan" | country== "United States"| country=="Taiwan" | country=="China" | country=="South Korea")%>%
mutate(lat= case_when(
country=="Japan"~"35.652832",
country=="United States"~"37.090240",
country=="Taiwan"~"23.697809",
country=="China"~"35.861660",
TRUE~"35.907757"))%>%
mutate(long= case_when(
country=="Japan"~"138.252930",
country=="United States"~"-95.712891",
country=="Taiwan"~"120.960518",
country=="China"~"104.195396",
TRUE~"127.766922"))
View(ramen_top5)
install.packages("leaflet")
library(leaflet)
ramen=leaflet()%>%
addTiles()%>%
addMarkers(lng=ramen_top5$long,lat=ramen_top5$lat)
ramen
ramen=leaflet()%>%
addTiles()%>%
addMarkers(lng=~ramen_top5$long,lat=~ramen_top5$lat)
View(ramen_top5)
ramen=leaflet()%>%
addTiles()%>%
addMarkers(~ramen_top5$long,~ramen_top5$lat)
ramen
View(ramen_top5)
ramen_top5=ramen_top_countries%>%
filter(country=="Japan" | country== "United States"| country=="Taiwan" | country=="China" | country=="South Korea")%>%
mutate(lat= case_when(
country=="Japan"~"35.652832",
country=="United States"~"37.090240",
country=="Taiwan"~"23.697809",
country=="China"~"35.861660",
TRUE~"35.907757"))%>%
mutate(long= case_when(
country=="Japan"~"138.252930",
country=="United States"~"-95.712891",
country=="Taiwan"~"120.960518",
country=="China"~"104.195396",
TRUE~"127.766922"))%>%
mutate(lat=as.numeric(lat),long=as.numeric(long))
ramen=leaflet()%>%
addTiles()%>%
addMarkers(~ramen_top5$long,~ramen_top5$lat)
# Show first 20 rows from the `quakes` dataset
leaflet(data = ramen_top5) %>% addTiles() %>%
addMarkers(~long, ~lat)
# Show first 20 rows from the `quakes` dataset
leaflet(data = ramen_top5) %>% addTiles() %>%
addMarkers(~long, ~lat, label=country )
# Show first 20 rows from the `quakes` dataset
leaflet(data = ramen_top5) %>% addTiles() %>%
addMarkers(~long, ~lat, label=~country )
# Show first 20 rows from the `quakes` dataset
leaflet(data = ramen_top5) %>% addTiles() %>%
addMarkers(~long, ~lat, label=~country) %>%
addCircleMarkers(
radius = ~nn,
stroke = FALSE, fillOpacity = 0.5
)
# Show first 20 rows from the `quakes` dataset
leaflet(data = ramen_top5) %>% addTiles() %>%
addMarkers(~long, ~lat, label=~country) %>%
addCircleMarkers(
radius = ~nn(6,10),
stroke = FALSE, fillOpacity = 0.5
)
# Show first 20 rows from the `quakes` dataset
leaflet(data = ramen_top5) %>% addTiles() %>%
addMarkers(~long, ~lat, label=~country)
# Show first 20 rows from the `quakes` dataset
leaflet(data = ramen_top5) %>% addTiles() %>%
addMarkers(~long, ~lat, label=~country, popup=~nn)
leaflet(data = ramen_top5) %>% addTiles() %>%
addMarkers(~long, ~lat, label=~country, popup=~(as.character(nn)))
library(dplyr)
library(leaflet)
ramen_ratings <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-04/ramen_ratings.csv")
str(ramen_ratings)
ramen_stars=ramen_ratings%>%
group_by(country,brand,style)%>%
summarise(n=n())
filter(stars>=4)
ramen_stars=ramen_ratings%>%
group_by(country,brand,style)%>%
summarise(n=n())%>%
filter(stars>=4)
ramen_stars=ramen_ratings%>%
group_by(country,brand,style)%>%
summarise(n=n())
View(ramen_stars)
ramen_stars=ramen_ratings%>%
group_by(country,brand,style)%>%
filter(stars>=4)%>%
summarise(n=n())
ramen_top_countries=ramen_stars%>%
group_by(country)%>%
count(country)%>%
arrange(desc(nn))
ramen_top5=ramen_top_countries%>%
filter(country=="Japan" | country== "United States"| country=="Taiwan" | country=="China" | country=="South Korea")%>%
mutate(lat= case_when(
country=="Japan"~"35.652832",
country=="United States"~"37.090240",
country=="Taiwan"~"23.697809",
country=="China"~"35.861660",
TRUE~"35.907757"))%>%
mutate(long= case_when(
country=="Japan"~"138.252930",
country=="United States"~"-95.712891",
country=="Taiwan"~"120.960518",
country=="China"~"104.195396",
TRUE~"127.766922"))%>%
mutate(lat=as.numeric(lat),long=as.numeric(long))
leaflet(data = ramen_top5) %>% addTiles() %>%
addMarkers(~long, ~lat, label=~country, popup=~(as.character(nn)))
unlink('C:/Users/Emma/Desktop/ramen_tidy_cache', recursive = TRUE)
